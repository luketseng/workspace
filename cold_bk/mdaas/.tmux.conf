# example: /usr/share/doc/tmux/examples/
# {{{ screen-keys.conf
# $Id: screen-keys.conf,v 1.7 2010/07/31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# Set Prefix r to reload
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"
bind-key M split-window -h "vim ~/.tmux.conf"

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

#{ tmux for Windows }
# lockscreen ^X x
#unbind ^X
#bind ^X lock-server

# displays *
unbind *
bind * list-clients

# windows ^W w
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# " windowlist -b
unbind '"'
bind '"' choose-window
#unbind =
#bind = choose-window

# screen ^C c
unbind ^C
# bind ^C new-window
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# next ^N n space (^@)
unbind ^@
unbind ^N
bind ^N next-window
unbind n
bind n next-window
unbind " "
bind " " next-window

# prev ^P p (^H)
unbind ^H
#bind ^H previous-window
unbind BSpace
bind BSpace previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window

# bind `
bind ` select-window -t 0

# title A
unbind A
bind A command-prompt "rename-window %%"

# last ^A
unbind ^A
bind ^A last-window

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# kill-pane
unbind X
bind X confirm-before "kill-pane"
unbind x
bind x confirm-before "kill-pane"

# quit \
unbind \
bind \ confirm-before "kill-server"

# redisplay ^L l
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# { tmux for pane }
# split -v | -s
unbind s
bind s split-window -v
unbind v
bind v split-window -h

# rotate-window
unbind C-o
bind o rotate-window

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind Left select-pane -L
bind Down select-pane -D
bind Up select-pane -U
bind Right select-pane -R
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind -r h resize-pane -L 2
bind -r j resize-pane -U 2
bind -r k resize-pane -D 2
bind -r l resize-pane -R 2
#bind -r - resize-pane -D 5
#bind -r = resize-pane -U 5
#bind -r < resize-pane -L 5
#bind -r > resize-pane -R 5

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# allow utf8 support
# setw -g utf8 on

set -g default-terminal "screen-256color" # + "tmux -2" => 256 color
set -g status-justify left
set -g status-interval 1 # 1 sec refresh
set -g display-time 3000
#set -g status-style 'bg=black,fg=white'
#set -g status-style fg=white,bg=black
#set-window-option -g window-status-current-style "bg=colour235,fg=cyan"
#set -g window-status-current-style bg=default,fg=cyan
#set-window-option -g window-status-current-attr default # bright, default
set -g window-status-current-attr default # bright, default
set -g status-left-length 15
set -g status-right-length 55
set -g status-bg white 
set -g status-left "#[fg=black,bg=colour7] [#I:#W] #[colour7]| " # 0:bash
set -g status-right "#[fg=black][#[fg=colour12]#H#[fg=black]]-#[fg=dark]#[fg=colour160]%Y.%m.%d #[fg=black]%H:%M:%S #[default]"
#set -g status-left "#[fg=white,bg=blue] > #S < #[default] |" # session-name
#[fg=magenta,bright](load: #(cat /proc/loadavg | cut -d \" \" -f 1,2,3))#[default]"

#-------------------------------------------------------#
#Pane colours
#-------------------------------------------------------#
# set inactive/active window styles
#set -g window-style fg=colour240,bg=colour235
#set -g window-active-style fg=white,bg=colour0

# pane border
#set -g pane-border-style bg=default,fg=default
#set -g pane-active-border-style bg=default,fg=cyan
#-------------------------------------------------------#
