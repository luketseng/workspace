"==============================================================================
" Theme Settings
"==============================================================================
" Available themes: desert, molokai, gruvbox, onedark
let g:current_theme = 'desert'  " Default theme
" colorscheme gruvbox             " Apply the gruvbox theme

" Theme switching function
function! ToggleTheme()
    if g:current_theme == 'desert'
        let g:current_theme = 'molokai'
        colorscheme molokai
    elseif g:current_theme == 'molokai'
        let g:current_theme = 'gruvbox'
        colorscheme gruvbox
    elseif g:current_theme == 'gruvbox'
        let g:current_theme = 'onedark'
        colorscheme onedark
    else
        let g:current_theme = 'desert'
        colorscheme desert
    endif
endfunction

" Show current theme
function! ShowCurrentTheme()
    echohl WarningMsg
    echo "Current theme: " . g:current_theme
    echohl None
endfunction

"==============================================================================
" Line Number Settings
"==============================================================================
" Line number mode cycling function
function! ToggleLineNumber()
    if !exists('b:line_number_mode')
        let b:line_number_mode = 0
    endif

    if b:line_number_mode == 0
        " Mode 0: Only absolute line numbers
        set number
        set norelativenumber
        let b:line_number_mode = 1
        echo "Line numbers: absolute only"
    elseif b:line_number_mode == 1
        " Mode 1: Both absolute and relative line numbers
        set number
        set relativenumber
        let b:line_number_mode = 2
        echo "Line numbers: absolute + relative"
    else
        " Mode 2: No line numbers
        set nonumber
        set norelativenumber
        let b:line_number_mode = 0
        echo "Line numbers: disabled"
    endif
endfunction

"==============================================================================
" Help Window
"==============================================================================
function! ShowVimHelp()
    new
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    setlocal nobuflisted
    setlocal modifiable
    setlocal nonumber
    setlocal norelativenumber
    setlocal foldcolumn=0

    " Help content
    put ='Vim Quick Help'
    put ='=============='
    put =''
    put ='Basic Commands:'
    put ='  ,ev     - Edit .vimrc'
    put ='  ,sv     - Reload .vimrc'
    put ='  ,tt     - Toggle theme'
    put ='  ,tl     - Show current theme'
    put ='  ,hh     - Show this help'
    put =''
    put ='Theme Management:'
    put ='  Available themes: (default: desert)'
    put ='    - desert'
    put ='    - molokai'
    put ='    - gruvbox'
    put ='    - onedark'
    put =''
    put ='Code Quality:'
    put ='  ,f      - Fix current file (ALE)'
    put ='  ,d      - Show error details (ALE)'
    put ='  ,aj     - Next error (ALE)'
    put ='  ,ak     - Previous error (ALE)'
    put =''
    put ='Window Management:'
    put ='  ,ln     - Toggle line numbers (cycle through:'
    put ='             absolute → absolute+relative → none)'
    put ='  ,/      - Clear search highlight'
    put =''
    put ='Press q to close this help'

    " Set buffer as readonly
    setlocal nomodifiable
    setlocal readonly

    " Map q to close help
    nnoremap <buffer> q :q<CR>

    " Go to top of buffer
    normal! gg
endfunction

"==============================================================================
" Key Mappings
"==============================================================================
" Leader key
let mapleader = ","

" Quick edit and reload vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" ALE shortcuts
nmap <leader>f :ALEFix<CR>
nmap <leader>d :ALEDetail<CR>
nmap <silent> <leader>aj :ALENext<CR>
nmap <silent> <leader>ak :ALEPrevious<CR>

" Line number toggle
nnoremap <leader>ln :call ToggleLineNumber()<CR>

" Clear search highlight
noremap <leader>/ :nohlsearch<CR>

" Theme and help key bindings
nnoremap <leader>tt :call ToggleTheme()<CR>
nnoremap <leader>tl :call ShowCurrentTheme()<CR>
nnoremap <leader>hh :call ShowVimHelp()<CR>

" Tagbar settings
nmap <F8> :TagbarToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader>T :TagbarOpen<CR>
" let g:tagbar_width = 30
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1

" NERDTree settings
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
nnoremap <leader>l :bnext<CR>
nnoremap <leader>h :bprev<CR>

"==============================================================================
" Visual Settings
"==============================================================================
" Highlight extra whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/


" Automatically run ALEFix and add a blank line at the end when saving a file
augroup SaveWithFixAndNewline
    autocmd!
    autocmd BufWriteCmd * call SaveWithALEAndNewline()
    " If you want to restrict this behavior to specific filetypes only (e.g. Python and JavaScript),
    " comment out the line above and uncomment the one below:
    " autocmd BufWriteCmd *.py,*.js call SaveWithALEAndNewline()
augroup END

function! SaveWithALEAndNewline()
    " If the filetype is not set, skip the custom save logic
    if &filetype == ''
        return
    endif

    " Run ALEFix to apply automatic formatting/fixes before saving
    ALEFix

    " If the last line is not empty, append an empty line at the end
    " if getline('$') != ''
    "     call append(line('$'), '')
    " endif

    " Write the current buffer to disk
    write
endfunction

